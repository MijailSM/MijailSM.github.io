{
  "nav": {
    "home": "Home",
    "projects": "Projects",
    "contact": "Contact"
  },
  "bio": {
    "summary": "Computer Engineering student with a strong interest in cybersecurity, networking, and low-level programming. This is my personal space where I share technical projects and learnings.",
    "objective": "💼 Looking for internships or junior positions in cybersecurity, networking, or backend development (starting June 2025)."
  },
  "download": {
    "cv_en": "Download CV (EN)",
    "cv_es": "Download CV (ES)"
  },
  "footer": {
    "license": "This site is licensed under"
  },
  "projects": {
    "title": "🧪 Selected Projects",
    "http_server_title": "HTTP Server in C",
    "http_server": "Low-level web server handling GET, POST, and OPTIONS requests using sockets in C.",
    "libpcap_title": "ARP Traffic Analyzer with libpcap",
    "libpcap": "Captures and analyzes ARP traffic with raw Ethernet frames in a Mininet environment.",
    "coming_soon_title": "🚧 More Projects Coming Soon",
    "coming_soon_desc": "I'm currently working on new projects related to cybersecurity, networking, and backend. Updates coming very soon!"
  },
  "contact": {
    "title": "Contact",
    "description": "Feel free to reach out through any of the following channels:"
  },
  "cert": {
    "title": "🎓 Certifications & Training",
    "ccncert": "Introduction to Cybersecurity Course – CCN-CERT Atenea (2024)",
    "hackthebox": "Progressing through HackTheBox cybersecurity labs"
  },
  "skills": {
    "title": "🛠️ Technical Skills",
    "python": "Python – ⭐⭐⭐⭐☆",
    "c": "C – ⭐⭐⭐⭐☆",
    "git": "Git / GitHub – ⭐⭐⭐☆☆",
    "linux": "Linux – ⭐⭐⭐⭐☆",
    "sql": "SQL - ⭐⭐⭐☆☆",
    "java": "Java - ⭐⭐⭐☆☆"
  },
  "http": {
    "title": "🖧 HTTP Server in C",
    "desc": "This project is a lightweight HTTP server written in pure C, designed to handle basic HTTP requests using low-level socket programming.",
    "features": "🔍 Key Features",
    "f1": "Supports GET, POST, and OPTIONS methods.",
    "f2": "No external libraries: only system calls and sockets.",
    "f3": "Manual analysis of HTTP headers and content.",
    "f4": "Robust connection handling (accept, fork, send, close).",
    "tech": "⚙️ Technologies Used",
    "learning": "📌 Learnings",
    "learning_text": "I deepened my understanding of the TCP/IP protocol, learned how to manually analyze HTTP, and practiced debugging concurrency and low-level header management. This project solidified my knowledge in both networking and systems programming.",
    "back": "← Back to Projects"
  },
  "libpcap": {
    "title": "📡 ARP Traffic Analyzer with libpcap",
    "desc": "Python tool to capture, send, and analyze ARP traffic using Ethernet frames. Developed and tested in Mininet.",
    "features": "🔍 Key Features",
    "f1": "Processes ARP requests and replies",
    "f2": "Custom ARP cache with locking system",
    "f3": "Support for Gratuitous ARP",
    "f4": "Documented debugging and testing tools",
    "tech": "⚙️ Technologies Used",
    "learning": "📌 Learnings",
    "learning_text": "I learned low-level networking with libpcap, implemented packet generation and inspection, and validated behaviors in virtual environments with Mininet.",
    "back": "← Back to Projects"
  },
  "project": {
    "prev": "← Previous",
    "next": "Next →",
    "back": "← Back to Projects"
  }
}
